//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: IP
//   Authors: Hell
//   Version: 1.0.0
//   Purpose: Parse IP packet
//  Category: Net
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef enum<ubyte> 
{  
    IPPROTOCOL_ICMP = 1,        // Internet Control Message
    IPPROTOCOL_IGMP= 2,         // Internet Group Management
    IPPROTOCOL_IPv4 = 4,        // IPv4 encapsulation Stream
    IPPROTOCOL_TCP = 6,         // Transmission Control Protocol
    IPPROTOCOL_UDP = 17,        // User Datagram Protocol
    IPPROTOCOL_IPv6ICMP = 58,   // ICMP for IPv6
}IPPROTOCOL;

typedef struct{
    byte Version:4 <comment="IP packet version">;
    byte Size:4 <name="Header Length", comment=IPv4HeaderComment>;
    union{
        byte Value;
        struct{
            byte CodePoint:6 <format=binary, name="Differentiated Services Codepoine">;
            byte ExplicitCongestionNotification:2 <format=binary, name="Explicit Congestion Notification">;
        }Member;
    }DifferentiatedServicesFields;
    WORD TotalLength;
    WORD Identification <format=hex>;
    WORD Flags:3;
    WORD FragmentOffset:13;
    ubyte TTL <comment="Time To Live">;
    enum IPPROTOCOL Protocol;
    WORD CheckSum <format=hex, comment=IPv4PacketCheckSumComment>;
    DWORD SrcAddress <format=hex, comment=IPv4AddressToString>;
    DWORD DstAddress <format=hex, comment=IPv4AddressToString>;
    if(Size * 4 - 20 != 0)
    {
        byte ExtendData[Size*4-20] <format=hex>;
    }
}IPV4_HEADER;

typedef struct{
    DWORD Version:4 <comment="IP packet version">;
    DWORD TrafficClass:8;
    DWORD FlowLabel:12;
    WORD PayloadLength;
    IPPROTOCOL Protocol;
    ubyte HopLimit;
    ubyte SrcAddress[16];
    ubyte DstAddress[16];
}IPV6_HEADER;

typedef struct(byte version) {
    if(version == 4)
    {
        IPV4_HEADER Header;
    }
    else if(version == 6)
    {
        IPV6_HEADER Header;
    }
}IP_HEADER;

typedef struct(WORD size){
    ubyte Type;
    ubyte Code;
    WORD CheckSum <format=hex, comment=ICMPCheckSumComment>;
    WORD Identifier <format=hex>;
    WORD SequenceNumber <format=hex>;
    byte Data[size-8] <format=hex>;
}ICMP_HEADER;

typedef struct(WORD size){
    ubyte Type;
    ubyte Code;
    WORD CheckSum <format=hex>;
    WORD Identifier <format=hex>;
    WORD SequenceNumber <format=hex>;
    byte Data[size-8] <format=hex>;
}ICMPV6_HEADER;

typedef struct(WORD size){
    WORD SrcPort;
    WORD DstPort;
    WORD Length <comment=UDPLengthComment>;
    WORD CheckSum <format=hex, comment=UDPCheckSumComment>;
    if(FileSize() - FTell() < size-8)
    {
        ubyte Payload[FileSize() - FTell()] <format=hex>;
    }
    else
    {
        ubyte Payload[size-8] <format=hex>;
    }
    
}UDP_HEADER;

typedef struct(WORD size){
    WORD SrcPort;
    WORD DstPort;
    DWORD SequenceNumber;
    DWORD AcknowledgmentNumber;
    WORD HeaderLength:4;
    WORD Flags:12 <format=binary, comment=TCPFlagsComment>;
    WORD Window;
    WORD CheckSum <format=hex, comment=TCPCheckSumComment>;
    WORD UrgentPointer;
}TCP_HEADER;

string IPv4HeaderComment(byte &size)
{
    string comment;
    SPrintf(comment, "IP Head szie %d", size * 4);
    return comment;
}

string IPv4AddressToString(DWORD address)
{
    DWORD a, b, c, d;
    a = (address & 0xFF000000) >> 24;
    b = (address & 0xFF0000) >> 16;
    c = (address & 0xFF00) >> 8;
    d = (address & 0xFF);
    string comment;
    SPrintf(comment, "%d.%d.%d.%d", a, b, c, d);
    return comment;
}

WORD CalcCheckSum(ubyte data[], int64 size, WORD last_checksum)
{
    local DWORD result = ~last_checksum;
    local int64 i = 0;
    local USHORT v = 0;
    local DWORD high_data;
    for (i = 0; i < size; i += 2)
    {
        if (size - i == 1)
        {
            v = ((WORD)data[i] << 8) ;
        }
        else
        {
            v = ((WORD)data[i] << 8) | (WORD)data[i+1];
        }
        result += (DWORD)v;

        while(1)
        {
            high_data = (result & 0xFFFF0000)>>16;
            if(high_data == 0)
            {
                break;
            }
    
            result = result & 0xFFFF;
            result += high_data;
        }

    }

    
    while(1){
        high_data = (result & 0xFFFF0000)>>16;
        if(high_data == 0)
        {
            break;
        }

        result = result & 0xFFFF;
        result += high_data;
    }

    return ~result;
}

WORD IPv4PacketCalcCheckSum()
{
    local ubyte ipv4_data[ip_header.Header.Size*4];
    ReadBytes(ipv4_data, file_start_pos, ip_header.Header.Size*4);
    ipv4_data[10] = 0;
    ipv4_data[11] = 0;
    local WORD checksum = CalcCheckSum(ipv4_data, ip_header.Header.Size*4, 0);
    return checksum;
}

string IPv4PacketCheckSumComment(WORD origin_checksum)
{
    string comment;
    WORD calc_checksum = IPv4PacketCalcCheckSum();
    if(calc_checksum == origin_checksum)
    {
        SPrintf(comment, "correct");
    }
    else
    {
        SPrintf(comment, "incorrect, should be 0x%X", calc_checksum);
    }
    return comment;
}

DWORD UDPPacketCalcCheckSum()
{
    // src_addr + dst_addr + 0x00 + 17 + UDP_size + UDP_data
    local DWORD address_size = sizeof(ip_header.Header.SrcAddress);
    local ubyte src_addr[address_size];
    local ubyte dst_addr[address_size];
    local ubyte append_data[4];
    local DWORD udp_data_size = next_head_size;
    local ubyte udp_data[udp_data_size];
 

    ReadBytes(udp_data, file_start_pos + ip_packet_size, udp_data_size);
    udp_data[6] = 0;
    udp_data[7] = 0;

    ConvertDataToBytes(ip_header.Header.SrcAddress, src_addr);
    ConvertDataToBytes(ip_header.Header.DstAddress, dst_addr);
    append_data[0] = 0;
    append_data[1] = IPPROTOCOL_UDP;
    append_data[2] = (udp_data_size & 0xFF00) >> 8;
    append_data[3] = udp_data_size & 0xFF;
    
    local WORD checksum = ~0;
    checksum = CalcCheckSum(src_addr, address_size, checksum);
    checksum = CalcCheckSum(dst_addr, address_size, checksum);
    checksum = CalcCheckSum(append_data, 4, checksum);
    checksum = CalcCheckSum(udp_data, udp_data_size, checksum);
    return checksum;
}

DWORD TCPPacketCalcCheckSum()
{
    // src_addr + dst_addr + 0x00 + 6 + UDP_size + UDP_data
    local DWORD address_size = sizeof(ip_header.Header.SrcAddress);
    local ubyte src_addr[address_size];
    local ubyte dst_addr[address_size];
    local ubyte append_data[4];
    local DWORD tcp_data_size = next_head_size;
    local ubyte tcp_data[tcp_data_size];
 

    ReadBytes(tcp_data, file_start_pos + ip_packet_size, tcp_data_size);
    tcp_data[16] = 0;
    tcp_data[17] = 0;

    ConvertDataToBytes(ip_header.Header.SrcAddress, src_addr);
    ConvertDataToBytes(ip_header.Header.DstAddress, dst_addr);
    append_data[0] = 0;
    append_data[1] = IPPROTOCOL_TCP;
    append_data[2] = (tcp_data_size & 0xFF00) >> 8;
    append_data[3] = tcp_data_size & 0xFF;
    
    local WORD checksum = ~0;
    checksum = CalcCheckSum(src_addr, address_size, checksum);
    checksum = CalcCheckSum(dst_addr, address_size, checksum);
    checksum = CalcCheckSum(append_data, 4, checksum);
    checksum = CalcCheckSum(tcp_data, tcp_data_size, checksum);
    return checksum;
}

DWORD ICMPPacketCalcCheckSum()
{
    local DWORD icmp_data_size = next_head_size;
    local ubyte icmp_data[icmp_data_size];
 
    ReadBytes(icmp_data, file_start_pos + ip_packet_size, icmp_data_size);
    icmp_data[2] = 0;
    icmp_data[3] = 0;
    local WORD checksum = ~0;
    checksum = CalcCheckSum(icmp_data, icmp_data_size, checksum);
    return checksum;
}

string UDPLengthComment(WORD udp_packet_size)
{
    if (next_head_size == udp_packet_size)
    {
        return "";
    }
    else if(next_head_size < udp_packet_size)
    {
        return "UDP packet size too big";
    }
    else
    {
        return "UDP packet size not enouth";
    }
}

string UDPCheckSumComment(WORD origin_checksum)
{
    string comment;
    WORD calc_checksum = UDPPacketCalcCheckSum();
    if(calc_checksum == origin_checksum)
    {
        SPrintf(comment, "correct");
    }
    else
    {
        SPrintf(comment, "incorrect, should be 0x%X", calc_checksum);
    }
    return comment;
}

string TCPCheckSumComment(WORD origin_checksum)
{
    string comment;
    WORD calc_checksum = TCPPacketCalcCheckSum();
    if(calc_checksum == origin_checksum)
    {
        SPrintf(comment, "correct");
    }
    else
    {
        SPrintf(comment, "incorrect, should be 0x%X", calc_checksum);
    }
    return comment;
}

string ICMPCheckSumComment(WORD origin_checksum)
{
    string comment;
    WORD calc_checksum = ICMPPacketCalcCheckSum();
    if(calc_checksum == origin_checksum)
    {
        SPrintf(comment, "correct");
    }
    else
    {
        SPrintf(comment, "incorrect, should be 0x%X", calc_checksum);
    }
    return comment;
}

string TCPFlagsComment(WORD flags)
{
    string comment;
    if (flags & 0x100)
    {
        comment += "ECN";
    }
    
    if (flags & 0x80)
    {
        if(Strlen(comment) > 0)
        {
            comment += ", ";
        }

        comment += "Reduced";
    }

    if (flags & 0x40)
    {
        if(Strlen(comment) > 0)
        {
            comment += ", ";
        }

        comment += "ECN-Echo";
    }

    if (flags & 0x20)
    {
        if(Strlen(comment) > 0)
        {
            comment += ", ";
        }

        comment += "Urgent";
    }

    if (flags & 0x10)
    {
        if(Strlen(comment) > 0)
        {
            comment += ", ";
        }

        comment += "ACK";
    }

    if (flags & 0x8)
    {
        if(Strlen(comment) > 0)
        {
            comment += ", ";
        }

        comment += "RST";
    }

    if (flags & 0x4)
    {
        if(Strlen(comment) > 0)
        {
            comment += ", ";
        }

        comment += "PSH";
    }

    if (flags & 0x2)
    {
        if(Strlen(comment) > 0)
        {
            comment += ", ";
        }

        comment += "SYN";
    }

    if (flags & 0x1)
    {
        if(Strlen(comment) > 0)
        {
            comment += ", ";
        }

        comment += "FIN";
    }
    return comment;
}

// Start Parse
BigEndian();
Printf("Start parse IP packet\n");
local int64 file_start_pos = OffsetGetStart();
byte ip_version:4 <hidden=true>;
local IPPROTOCOL g_protocol;
FSeek(file_start_pos);
IP_HEADER ip_header(ip_version);
local WORD ip_packet_size = 0;
local WORD next_head_size = 0;
if (ip_version == 4)
{
    ip_packet_size = ip_header.Header.Size * 4;
    next_head_size = ip_header.Header.TotalLength - ip_packet_size;
}
else if(ip_version == 6)
{
    ip_packet_size = sizeof(IPV6_HEADER);
    next_head_size = ip_header.Header.PayloadLength;
}
else
{
    Printf("Unknown IP version : %d\n", ip_version);
    return -1;
}



switch(ip_header.Header.Protocol)
{
    case IPPROTOCOL_ICMP:
        ICMP_HEADER icmp_header(next_head_size);
        break;
    case IPPROTOCOL_UDP:
        UDP_HEADER udp_header(next_head_size);
        break;
    case IPPROTOCOL_TCP:
        TCP_HEADER tcp_header(next_head_size);
        break;
    case IPPROTOCOL_IPv6ICMP:
        ICMPV6_HEADER icmp_header(next_head_size);
        break;
    default:
        Printf("Unknown IPPROTOCOL : %d\n", ip_header.Header.Protocol);
        return -1;
}

